@page "/categoria/editar/{id:int}"

@using YummyAdmindWasm.Models
@using MudBlazor

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Editar Categoria</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="categoria" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Nombre" @bind-Value="categoria.nombre" For="@(() => categoria.nombre)" />
                      
                        <MudSelect Variant="Variant.Outlined" Label="Categoría" AnchorOrigin="Origin.BottomCenter"
                                   @bind-Value="categoriaSeleccionada">
                            @foreach (var item in categoriasG)
                            {
                                <MudSelectItem Value="@item.id">@item.nombre</MudSelectItem>
                            }
                        </MudSelect>

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Href="@($"/categoria/index")" Variant="Variant.Filled" Color="Color.Info"
                                   Class="text-center">Regresar</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                   Class="ml-auto">Guardar cambios</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">Ocurrió un problema.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }
    private IEnumerable<CategoriaGlobal> categoriasG = new List<CategoriaGlobal>();
    private int categoriaSeleccionada;
    private bool showLeaveAlert = false;
    Categoria categoria = new Categoria();
   
    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
        new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getCategoriasGlobales();

        var resp = await httpClient.GetStringAsync("proyectos/" + id);
        categoria = JsonSerializer.Deserialize<Categoria>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
       
        categoriaSeleccionada = categoria.categoriaGlobal.id;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await saveChanges();
    }

    private async Task saveChanges()
    {
        categoria.categoriaGlobalId = categoriaSeleccionada;
        var httpResponse = await httpClient.PutAsJsonAsync<Categoria>("categorias/" + categoria.id, categoria);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            navigationManager.NavigateTo("proyecto/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }

    private async Task getCategoriasGlobales()
    {
        var httpResponse = await httpClient.GetStringAsync("categoriasGlobal/lista");
        categoriasG = JsonSerializer.Deserialize<IEnumerable<CategoriaGlobal>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}