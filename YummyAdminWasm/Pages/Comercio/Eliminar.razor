@page "/comercio/eliminar/{id:int}"

@using YummyAdmindWasm.Models
@using MudBlazor

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService


<MudText Typo="Typo.h2" Class="ml">Estas seguro que quieres eliminar este comercio?</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="comercio" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardActions>
                        <MudButton Href="@($"/comercio/index")" Variant="Variant.Filled" Color="Color.Info"
                                   Class="text-center">Regresar</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error"
                                   Class="ml-auto">Eliminar</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">Ocurri√≥ un problema.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }

    private Comercio comercio = new Comercio();
    private Categoria categoria = new Categoria();
  
    private bool showLeaveAlert = false;
    bool ReadOnly = true;

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
        new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));

        var resp = await httpClient.GetStringAsync("categorias/" + id);
        comercio = JsonSerializer.Deserialize<Comercio>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        categoria = comercio.categoria ;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await eliminar();
    }

    private async Task eliminar()
    {
        var httpResponse = await httpClient.DeleteAsync("comercios/" + comercio.id);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            navigationManager.NavigateTo("comercio/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }
}