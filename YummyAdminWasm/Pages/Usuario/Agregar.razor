@page "/usuario/agregar"

@using YummyAdminWasm.Models
@using MudBlazor
@inject IConfiguration Configuration
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Nuevo Usuario</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="usuario" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>

                        <MudTextField Label="Nombre" @bind-Value="usuario.Nombre" For="@(() => usuario.Nombre)" />
                        <MudTextField Label="Apellido" @bind-Value="usuario.Apellido" For="@(() => usuario.Apellido)" />
                        <MudTextField Label="Teléfono" @bind-Value="usuario.Telefono" For="@(() => usuario.Telefono)" />
                        <MudTextField Label="Login" @bind-Value="usuario.Login" For="@(() => usuario.Login)" />

                        <MudTextField Label="Contraseña" @bind-Value="usuario.Clave" For="@(() => usuario.Clave)" Password="true" />
                        <MudTextField Label="Confirmar Contraseña" @bind-Value="usuario.ConfirmClave_aux" For="@(() => usuario.ConfirmClave_aux)" Password="true" />

                        <MudSelect Variant="Variant.Outlined" Label="Rol" @bind-Value="usuario.IdRol">
                            @foreach (var rol in roles)

                            {
                                <MudSelectItem Value="@rol.Id">@rol.Nombre</MudSelectItem>
                            }
                        </MudSelect>

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Href="@($"/usuario/index")" Variant="Variant.Filled" Color="Color.Info"
                                   Class="text-center">Regresar</MudButton>

                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                   Class="ml-auto">
                            Guardar
                        </MudButton>

                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)

            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">No se pudo guardar.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private Usuario usuario = new Usuario();



    // Definir los roles de manera estática en el frontend

    private IEnumerable<Rol> roles = new List<Rol>
    {
        new Rol { Id = 1, Nombre = "ADMIN" },
        new Rol { Id = 2, Nombre = "USER" },
        new Rol { Id = 3, Nombre = "CLIENTE" }
    };



    private bool showLeaveAlert = false;



    protected override async Task OnInitializedAsync()

    {

        // Ya no es necesario hacer la llamada HTTP para obtener los roles

    }



    private async Task OnValidSubmit(EditContext context)

    {

        await SaveUsuario();

    }



    private async Task SaveUsuario()

    {

        var httpResponse = await httpClient.PostAsJsonAsync("auth/registro", usuario);



        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))

        {

            showLeaveAlert = true;

        }

        else

        {

            navigationManager.NavigateTo("usuario/index");

        }

    }



    private void CloseMe(bool value)

    {

        showLeaveAlert = false;

    }
}
