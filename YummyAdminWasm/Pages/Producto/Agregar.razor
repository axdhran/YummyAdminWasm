@page "/producto/agregar"

@using YummyAdmindWasm.Models
@using MudBlazor
@using Firebase.Auth
@using Firebase.Auth.Providers
@using Firebase.Storage

@inject IConfiguration Configuration
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Nuevo Producto</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="producto" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>

                        <MudTextField Label="Nombre" @bind-Value="producto.nombre" For="@(() => producto.nombre)" />
                        <MudTextField Label="Descripción" @bind-Value="producto.descripcion" For="@(() => producto.descripcion)" />
                        <MudTextField Label="Precio" @bind-Value="producto.precio" For="@(() => producto.precio)" />

                        <MudSelect Variant="Variant.Outlined" Label="Estado" @bind-Value="producto.estado">
                            <MudSelectItem Value="@(Producto.EstadoProducto.ACTIVO)">Activo</MudSelectItem>
                            <MudSelectItem Value="@(Producto.EstadoProducto.INACTIVO)">Inactivo</MudSelectItem>
                        </MudSelect>


                        <MudSelect Variant="Variant.Outlined" Label="Categoría de Producto" @bind-Value="categoriaSeleccionada">
                            @foreach (var item in categoriasProducto)
                            {
                                <MudSelectItem Value="@item.id">@item.nombre</MudSelectItem>
                            }
                        </MudSelect>

                        <br>
                        <br>
                        <h3>Subir imagen a Firebase Storage</h3>
                        <InputFile OnChange="@LoadImgFiles" />

                        @if (selectedImageFile != null)
                        {
                            <p>Archivo seleccionado: @selectedImageFile.Name</p>
                            <MudButton @onclick="UploadImage" Disabled="@(isUploadingImage)">Subir imagen</MudButton>
                            <p>@uploadImageStatus</p>
                        }

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Href="@($"/producto/index")" Variant="Variant.Filled" Color="Color.Info"
                                   Class="text-center">Regresar</MudButton>

                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                   Class="ml-auto"
                                   Disabled="@(isUploadingImage || !isImageUploaded)">
                            Guardar
                        </MudButton>

                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">No se pudo guardar.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    private IEnumerable<CategoriaProducto> categoriasProducto = new List<CategoriaProducto>();
    private bool showLeaveAlert = false;
    Producto producto = new Producto();
    private int categoriaSeleccionada;

    private IBrowserFile? selectedImageFile;

    string? downloadUrl;
    private string? uploadImageStatus;
    private bool isUploadingImage = false;
    private bool isImageUploaded = false;

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getCategoriasProducto();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (isImageUploaded)
        {
            await save();
            success = true;
            StateHasChanged();
        }
    }

    private async Task LoadImgFiles(InputFileChangeEventArgs e)
    {
        selectedImageFile = e.File;
    }

    private async Task UploadImage()
    {
        if (selectedImageFile != null)
        {
            isUploadingImage = true;
            uploadImageStatus = "Subiendo imagen...";
            try
            {
                downloadUrl = await SubirAStorageFirebase(selectedImageFile, "productos");
                isImageUploaded = true;
                uploadImageStatus = "Imagen subida correctamente.";
            }
            catch (Exception ex)
            {
                uploadImageStatus = "Error al subir la imagen.";
                Console.WriteLine($"Error subiendo la imagen: {ex.Message}");
                showLeaveAlert = true;
            }
            finally
            {
                isUploadingImage = false;
                StateHasChanged();
            }
        }
        selectedImageFile = null;
    }

    private async Task<string> SubirAStorageFirebase(IBrowserFile file, string folder)
    {
        var apiKey = "AIzaSyA8rTDDaeIPRtCel7d4sySa1jwq9xaASro";
        var bucket = "yummyad-fe0c2.appspot.com";
        var authEmail = "adrianhernandez3p0@gmail.com";
        var authPassword = "Adrian123$#";

        var config = new FirebaseAuthConfig
            {
                ApiKey = apiKey,
                AuthDomain = $"yummyad-fe0c2.firebaseapp.com",
                Providers = new FirebaseAuthProvider[]{
                new EmailProvider()
            }
            };
        var client = new FirebaseAuthClient(config);
        var auth = await client.SignInWithEmailAndPasswordAsync(authEmail, authPassword);

        var cancellation = new CancellationTokenSource();

        var task = new FirebaseStorage(
            bucket,
            new FirebaseStorageOptions
                {
                    AuthTokenAsyncFactory = async () => await auth.User.GetIdTokenAsync(),
                    ThrowOnCancel = true
                })
            .Child(folder)
            .Child(file.Name)
            .PutAsync(file.OpenReadStream(maxAllowedSize: 10485760), cancellation.Token);

        return await task;
    }

    private async Task save()
    {
        producto.categoriaProductoId = categoriaSeleccionada;
        producto.imagen = downloadUrl;
        var httpResponse = await httpClient.PostAsJsonAsync<Producto>("productos", producto);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            navigationManager.NavigateTo("producto/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }

    private async Task getCategoriasProducto()
    {
        //var httpResponse = await httpClient.GetStringAsync("categoriaProductos"); // .NET
        var httpResponse = await httpClient.GetStringAsync("categoriaProductos/lista"); // Java
        categoriasProducto = JsonSerializer.Deserialize<IEnumerable<CategoriaProducto>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}
