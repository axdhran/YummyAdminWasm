@page "/producto/detalle/{id:int}"

@using YummyAdmindWasm.Models
@using MudBlazor

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Detalles del Producto</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="producto">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Nombre" @bind-Value="producto.nombre" For="@(() => producto.nombre)" ReadOnly="ReadOnly" />
                        <MudTextField Label="Precio" @bind-Value="producto.precio" For="@(() => producto.precio)" ReadOnly="ReadOnly" />
                        <MudTextField Label="Descripción" @bind-Value="producto.descripcion" For="@(() => producto.descripcion)" ReadOnly="ReadOnly" />

                        <MudTextField Label="Categoría" @bind-Value="categoria.nombre" For="@(() => categoria.nombre)" ReadOnly="ReadOnly" />

                        <MudImage Src="@producto.imagen" Alt="Imagen del Producto" Elevation="25" Class="rounded-lg" />
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton Href="@($"/producto/index")" Variant="Variant.Filled" Color="Color.Info"
                                   Class="text-center">Regresar</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }
    private Producto producto = new Producto();
    private CategoriaProducto categoria = new CategoriaProducto();
    bool ReadOnly = true;

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getProducto();

        // Se asume que el Producto tiene una propiedad CategoriaProducto para mostrar la categoría asociada
        categoria = producto.categoriaProducto;
    }

    private async Task getProducto()
    {
        var resp = await httpClient.GetStringAsync($"productos/{id}");
        producto = JsonSerializer.Deserialize<Producto>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}
